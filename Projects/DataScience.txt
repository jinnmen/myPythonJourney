# https://courses.edx.org/courses/course-v1:ColumbiaX+DS101X+1T2017/courseware/83b2b74597c44d858f1cd81edef2faf2/10857aaed5ab4e7a80fb46e9246ca174/1?activate_block_id=block-v1%3AColumbiaX%2BDS101X%2B1T2017%2Btype%40vertical%2Bblock%4027d55c45af694affabb8dd5fe610bfc3
Modern Data Scientists needs to have 3 main skills:
i) Computer Science: Algorithms
ii) Statistics: Inference, Bayesian Statistics, Probability modeling, probability theory.
iii) Optimization: Knowing how to optimize complicated functions with respect to their parameters.

Need domain expertise

Listening to people in real world speak. (soft skill)
Then intepreting your machine learning in such a way
that you can communicate to somebody what you've learned
by analyzing their data set.

Ability to see how problems of a domain
can be reframed as machine learning tasks.

Collaboration skills with other people
who are computational.

Data scientist needs to be able to manage
large amounts of data, need to be able to program.

Basically need to handle lots of different
programming languages, more in a scripting sense.

Need to be able to be a data munger and move data around 
from different platforms and different sources.
Need to be able to program well.
Need to process massive amounts of data.
Need to understand the techniques behind the data science algorithms.


http://datajournalismhandbook.org/1.0/en/understanding_data_0.html
data-literacy is the ability to consume for knowledge, produce coherently and think critically about data. Data literacy includes statistical literacy but also understanding how to work with large data sets, how they were produced, how to connect various data sets and how to interpret them.

Try R! Chap2 onwards
http://tryr.codeschool.com/levels/2/challenges/1


Population
Random sample -> Random hence good enough to represent overall trend.
But size wise may not be sufficient to represent whole nation.

Kaggle learning
https://www.kaggle.com/learn/machine-learning
https://www.kaggle.com/dansbecker/your-first-scikit-learn-model
https://www.kaggle.com/leongjm/my-first-machine-learning-model/edit

https://courses.edx.org/courses/course-v1:ColumbiaX+DS101X+1T2017/courseware/5c71f003d43e44b2b21a934df4dc6ca0/66c6152820af4740a07787c07e5a37c5/?child=first

Choosing prediction target
# This code loads the data. You have seen it before, so you don't need to focus on it here.

import pandas as pd

melbourne_file_path = '../input/melbourne-housing-snapshot/melb_data.csv'
melbourne_data = pd.read_csv(melbourne_file_path)

# The Melbourne data has somemissing values (some houses for which some variables weren't recorded.)
# We'll learn to handle missing values in a later tutorial.  
# Your Iowa data doesn't have missing values in the predictors you use. 
# So we will take the simplest option for now, and drop those houses from our data. 
#Don't worry about this much for now, though the code is:

# dropna drops missing values (think of na as "not available")
melbourne_data = melbourne_data.dropna(axis=0)

y = melbourne_data.Price

# Choosing predictions
melbourne_predictors = ['Rooms', 'Bathroom', 'Landsize', 'BuildingArea', 
                        'YearBuilt', 'Lattitude', 'Longtitude']
                        
X = melbourne_data[melbourne_predictors]

from sklearn.tree import DecisionTreeRegressor

# Define model
melbourne_model = DecisionTreeRegressor()

# Fit model
melbourne_model.fit(X, y)
    
print("Making predictions for the following 5 houses:")
print(X.head())
print("The predictions are")
print(melbourne_model.predict(X.head()))


# Own script:

import pandas as pd

hprice_file_path = '../input/house-prices-advanced-regression-techniques/train.csv'
hprice_data = pd.read_csv(hprice_file_path)

hprice_data = hprice_data.dropna(axis=0)

y = hprice_data.SalePrice

hprice_predictors = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']

X = hprice_data[hprice_predictors]

from sklearn.tree import DecisionTreeRegressor

my_model = DecisionTreeRegressor()

my_model.fit(X, y)

print ("Making predictions for the following 5 houses")
print(X.head())
print("The predictions are")
print(my_model.predict(X.head()))